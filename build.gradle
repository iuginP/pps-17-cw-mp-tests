group = projectGroup
version = projectVersion
description = projectDescription

def jarDestinationFolder = "${rootDir.path}$productionJarFolder"

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    repositories {
        // Repositories where to find libraries
        jcenter()
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'org.scoverage'
    apply plugin: 'com.github.maiflai.scalatest'
    apply plugin: 'pmd'
    apply plugin: 'checkstyle'

    sourceCompatibility = "$jdkVersion"
    javadoc.destinationDir = file("$docsFolderJava/${it.path}")
    scaladoc.destinationDir = file("$docsFolderScala/${it.path}")

    dependencies {
        if (project.name != 'core') {
            implementation project(':core')
        }
        implementation 'org.scala-lang:scala-library:2.12.2'
        implementation 'com.typesafe.scala-logging:scala-logging_2.12:3.9.0'
        implementation 'ch.qos.logback:logback-classic:1.2.3'

        if (project.name != 'core-testing') {
            testImplementation project(':core-testing')
        }
        testImplementation 'org.scalatest:scalatest_2.12:3.0.1'
        testImplementation 'org.scalamock:scalamock-scalatest-support_2.12:3.5.0'

        testRuntime 'org.pegdown:pegdown:1.6.0'

        scoverage 'org.scoverage:scalac-scoverage-plugin_2.12:1.3.1'
        scoverage 'org.scoverage:scalac-scoverage-runtime_2.12:1.3.1'
    }

    if (project.name == 'client' || project.name == 'rooms' || project.name == 'authentication') {
        apply plugin: 'com.github.johnrengelman.shadow'

        shadowJar {
            baseName = artifactId
            version = projectVersion
            classifier = project.name

            destinationDir = file(jarDestinationFolder)
            mergeServiceFiles('reference.conf') // solves problems with AKKA
        }
    }

    clean {
        // delete production folder
        delete(file(jarDestinationFolder))
    }
}

configure(subprojects.findAll { it.name == 'core' || it.parent.name == 'services' }) {

    dependencies {
        implementation 'io.vertx:vertx-lang-scala_2.12:3.5.2'
        implementation 'io.vertx:vertx-web-scala_2.12:3.5.2'
        implementation 'io.vertx:vertx-web-client-scala_2.12:3.5.2'
        implementation 'io.vertx:vertx-jdbc-client-scala_2.12:3.5.2'
        implementation 'io.vertx:vertx-mysql-postgresql-client:3.5.2'

        runtimeOnly 'mysql:mysql-connector-java:5.1.13'

        testRuntimeOnly 'org.hsqldb:hsqldb:2.4.1'
    }

    tasks.withType(Test) {
        maxParallelForks = 1
    }
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.org.scoverage:gradle-scoverage:2.3.0"
        classpath "gradle.plugin.com.github.maiflai:gradle-scalatest:0.22"

        // to build fatJars
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

defaultTasks 'clean', 'build', 'javadoc', 'scaladoc', 'shadowJar'
