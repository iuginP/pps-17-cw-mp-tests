package it.cwmp.client.view.authentication

import akka.actor.{Actor, ActorRef}
import it.cwmp.client.controller.ClientControllerMessages
import it.cwmp.client.view.{AlertActor, FXAlerts}
import javafx.application.Platform
import javafx.embed.swing.JFXPanel

/**
  * Object that contains all the messages that this actor can receive.
  */
object AuthenticationViewMessages {
  /**
    * Message that represents the initialization of the controller that will then be used for the answers that will
    * be sent to the sender.
    * When received, the controller is initialized.
    */
  case object InitController

  /**
    * Message representing the visualization of the graphical interface.
    * When received, the GUI is shown to the user.
    */
  case object ShowGUI

  /**
    * Message represents the hiding of the graphical interface.
    * When received, the GUI is hidden.
    */
  case object HideGUI
}

object AuthenticationViewActor {
  def apply(): AuthenticationViewActor = new AuthenticationViewActor()
}


/**
  * Actor assigned to the management of the display of the authentication screen and of the events generated by it.
  *
  * @author Elia Di Pasquale
  */
class AuthenticationViewActor extends Actor with AlertActor {

  /**
    * Controller that deals with the graphic management of authentication components.
    */
  var fxController: AuthenticationFXController = _
  /**
    * Control actor through which messages for event management are received and sent.
    */
  var controllerActor: ActorRef = _

  /**
    * Method invoked at the start of the actor (N.B. Do not call directly).
    * Initializes and manages the controller to manage the graphic layout of the authentication section.
    */
  override def preStart(): Unit = {
    super.preStart()

    //inizializzo il toolkit
    new JFXPanel
    Platform setImplicitExit false
    Platform runLater(() => {
      fxController = AuthenticationFXController(new AuthenticationFXStrategy {
        override def onSignIn(username: String, password: String): Unit =
          controllerActor ! ClientControllerMessages.AuthenticationPerformSignIn(username, password)

        override def onCheckPassword(password: String, confirmPassword: String): Boolean =
          password == confirmPassword

        override def onSignUp(username: String, password: String): Unit =
          controllerActor ! ClientControllerMessages.AuthenticationPerformSignUp(username, password)
      })
    })
  }
  /**
    * Method that defines the behavior of the current actor, called from outside to convey messages to it
    * (N.B. Do not call directly).
    * The messages that it is able to process are grouped into [[AuthenticationViewMessages]]
    */
  override def receive: Receive = alertBehaviour orElse {
    case AuthenticationViewMessages.InitController => controllerActor = sender()
    case AuthenticationViewMessages.ShowGUI => Platform runLater(() => fxController showGUI())
    case AuthenticationViewMessages.HideGUI => Platform runLater(() => fxController hideGUI())
  }
}
